{% case type.type %}
{% when "void" %}

instance ToQuery {{ type.name }} where
    toQuery = const mempty
{% when "empty" %}

instance ToQuery {{ type.name }} where
    toQuery = const mempty
{% when "nullary" %}
{% else %}

instance ToQuery {{ type.name }} where
    toQuery {{ type.name }}{..} = mconcat
  {% for field in type.fields %}
    {% if field.value.flattened && !(field.value.protocol == "ec2") %}
        {% include "list.ede" %} {{ "toQuery" | justifyLeft(type.locationPad) }} {{ field.value.name }}
    {% elif field.value.protocol == "ec2" && field.value.monoid %}
        {% include "list.ede" %} "{{ field.value.locationName | upperHead | concat("\"") | justifyLeft(type.locationPad) }} `toQueryList` {{ field.value.name }}
    {% elif field.value.protocol == "ec2" %}
        {% include "list.ede" %} "{{ field.value.locationName | upperHead | concat("\"") | justifyLeft(type.locationPad) }} =? {{ field.value.name }}
    {% else %}
        {% include "list.ede" %} "{{ field.value.locationName | concat("\"") | justifyLeft(type.locationPad) }} =? {{ field.value.name }}
    {% endif %}
  {% endfor %}
        ]
{% endcase %}
